// Mocks generated by Mockito 5.3.2 from annotations
// in burger/test/domain/usecases/find_burger_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:burger/domain/entities/burger.dart' as _i5;
import 'package:burger/domain/repositories/burger_repository.dart' as _i3;
import 'package:fos/fos.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFos_0<F extends _i1.Failure, S> extends _i2.SmartFake
    implements _i1.Fos<F, S> {
  _FakeFos_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BurgerRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBurgerRepository extends _i2.Mock implements _i3.BurgerRepository {
  MockBurgerRepository() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i1.Fos<_i1.Failure, List<_i5.Burger>>> findBurgers() =>
      (super.noSuchMethod(
        Invocation.method(
          #findBurgers,
          [],
        ),
        returnValue: _i4.Future<_i1.Fos<_i1.Failure, List<_i5.Burger>>>.value(
            _FakeFos_0<_i1.Failure, List<_i5.Burger>>(
          this,
          Invocation.method(
            #findBurgers,
            [],
          ),
        )),
      ) as _i4.Future<_i1.Fos<_i1.Failure, List<_i5.Burger>>>);
}
